// ***** 0. Documentation Section *****
// TrafficLight.c for Lab 5
// Runs on LM4F120/TM4C123
// Implementation of a Moore finite state machine to operate a traffic light.  
// Daniel Valvano, Jonathan Valvano
// Feb 24, 2015

// east/west red light connected to PB5
// east/west yellow light connected to PB4
// east/west green light connected to PB3
// north/south facing red light connected to PB2
// north/south facing yellow light connected to PB1
// north/south facing green light connected to PB0
// pedestrian detector connected to PE2 (1=pedestrian present)
// north/south car detector connected to PE1 (1=car present)
// east/west car detector connected to PE0 (1=car present)
// "walk" light connected to PF3 (built-in green LED)
// "don't walk" light connected to PF1 (built-in red LED)

// ***** 1. Pre-processor Directives Section *****
#include "TExaS.h"
#include "tm4c123gh6pm.h"

//#define NVIC_ST_CTRL_R      (*((volatile unsigned long *)0xE000E010))
//#define NVIC_ST_RELOAD_R    (*((volatile unsigned long *)0xE000E014))
//#define NVIC_ST_CURRENT_R   (*((volatile unsigned long *)0xE000E018))
void SysTick_Init(void){
  NVIC_ST_CTRL_R = 0;               // disable SysTick during setup
	NVIC_ST_RELOAD_R = 0x00FFFFFF;
	NVIC_ST_CURRENT_R = 0;
  NVIC_ST_CTRL_R = 0x00000005;      // enable SysTick with core clock
}
// The delay parameter is in units of the 80 MHz core clock. (12.5 ns)
void SysTick_Wait(unsigned long delay){
  NVIC_ST_RELOAD_R = delay-1;  // number of counts to wait
  NVIC_ST_CURRENT_R = 0;       // any value written to CURRENT clears
  while((NVIC_ST_CTRL_R&0x00010000)==0){ // wait for count flag
  }
}
// 10000us equals 10ms
void SysTick_Wait10ms(unsigned long delay){
  unsigned long i;
  for(i=0; i<delay; i++){
    SysTick_Wait(800000);  // wait 10ms
  }
}

void PLL_Init(void){
  // 0) Use RCC2
  SYSCTL_RCC2_R |=  0x80000000;  // USERCC2
  // 1) bypass PLL while initializing
  SYSCTL_RCC2_R |=  0x00000800;  // BYPASS2, PLL bypass
  // 2) select the crystal value and oscillator source
  SYSCTL_RCC_R = (SYSCTL_RCC_R &~0x000007C0)   // clear XTAL field, bits 10-6
                 + 0x00000540;   // 10101, configure for 16 MHz crystal
  SYSCTL_RCC2_R &= ~0x00000070;  // configure for main oscillator source
  // 3) activate PLL by clearing PWRDN
  SYSCTL_RCC2_R &= ~0x00002000;
  // 4) set the desired system divider
  SYSCTL_RCC2_R |= 0x40000000;   // use 400 MHz PLL
  SYSCTL_RCC2_R = (SYSCTL_RCC2_R&~ 0x1FC00000)  // clear system clock divider
                  + (4<<22);      // configure for 80 MHz clock
  // 5) wait for the PLL to lock by polling PLLLRIS
  while((SYSCTL_RIS_R&0x00000040)==0){};  // wait for PLLRIS bit
  // 6) enable use of PLL by clearing BYPASS
  SYSCTL_RCC2_R &= ~0x00000800;
}

#define LIGHT                   (*((volatile unsigned long *)0x400050FC))
#define GPIO_PORTB_OUT          (*((volatile unsigned long *)0x400050FC)) // bits 5-0

#define GPIO_PORTE_IN           (*((volatile unsigned long *)0x4002400C)) // bits 1-0
#define SENSOR                  (*((volatile unsigned long *)0x4002400C))


#define SYSCTL_RCGC2_GPIOE      0x00000010  // port E Clock Gating Control
#define SYSCTL_RCGC2_GPIOB      0x00000002  // port B Clock Gating Control
//#define SYSCTL_RCGC2_GPIOF      0x00000002  // port B Clock Gating Control


// ***** 2. Global Declarations Section *****

// FUNCTION PROTOTYPES: Each subroutine defined
void DisableInterrupts(void); // Disable interrupts
void EnableInterrupts(void);  // Enable interrupts

struct State {
  unsigned long Out; 
  unsigned long Time;  
  unsigned long Next[8];}; 
typedef const struct State STyp;
#define goN   0
#define waitNE 1
#define waitNP 2
#define goE   3
#define waitEN 4
#define waitEP 5
#define goP 6
#define waitOnN 7
#define waitOffN 8
#define waitOn2N 9
#define waitOff2N 10
#define waitOnE 11
#define waitOffE 12
#define waitOn2E 13
#define waitOff2E 14

STyp FSM[15]={
 {0xA1,3000,{goN,waitNP,waitNE,waitNP,goN,waitNP,waitNE,waitNP}}, 
 {0xA2, 500,{goE,goE,goE,goE,goE,goE,goE,goE}},
 {0xA2, 500,{goP,goP,goP,goP,goP,goP,goP,goP}},
 {0x8C,3000,{goE,waitEP,goE,waitEP,waitEN,waitEP,waitEN,waitEP}},
 {0x94, 500,{goN,goN,goN,goN,goN,goN,goN,goN}},
 {0x94, 500,{goP,goP,goP,goP,goP,goP,goP,goP}},
 {0x64,3000,{goP,goP,waitOnE,waitOnE,waitOnN,waitOnN,waitOnN,waitOnE}},
 {0x24, 250,{waitOffN,waitOffN,waitOffN,waitOffN,waitOffN,waitOffN,waitOffN,waitOffN}},
 {0x24, 250,{waitOn2N,waitOn2N,waitOn2N,waitOn2N,waitOn2N,waitOn2N,waitOn2N,waitOn2N}},
 {0x24, 250,{waitOff2N,waitOff2N,waitOff2N,waitOff2N,waitOff2N,waitOff2N,waitOff2N,waitOff2N}},
 {0x24, 250,{goN,goN,goN,goN,goN,goN,goN,goN}},
 {0xA4, 250,{waitOffE,waitOffE,waitOffE,waitOffE,waitOffE,waitOffE,waitOffE,waitOffE}},
 {0xA4, 250,{waitOn2E,waitOn2E,waitOn2E,waitOn2E,waitOn2E,waitOn2E,waitOn2E,waitOn2E}},
 {0xA4, 250,{waitOff2E,waitOff2E,waitOff2E,waitOff2E,waitOff2E,waitOff2E,waitOff2E,waitOff2E}},
 {0xA4, 250,{goE,goE,goE,goE,goE,goE,goE,goE}}};
unsigned long S;  // index to the current state 
unsigned long Input; 


// ***** 3. Subroutines Section *****

int main(void){ 
  TExaS_Init(SW_PIN_PE210, LED_PIN_PB543210); // activate grader and set system clock to 80 MHz
	volatile unsigned long delay;
	SysTick_Init();
	PLL_Init();
  SYSCTL_RCGC2_R |= 0x32;      // 1) B E
  delay = SYSCTL_RCGC2_R;      // 2) no need to unlock
  GPIO_PORTE_AMSEL_R &= ~0x07; // 3) disable analog function on PE1-0
  GPIO_PORTE_PCTL_R &= ~0x000000FF; // 4) enable regular GPIO
  GPIO_PORTE_DIR_R &= ~0x07;   // 5) inputs on PE1-0
  GPIO_PORTE_AFSEL_R &= ~0x07; // 6) regular function on PE1-0
  GPIO_PORTE_DEN_R |= 0x07;    // 7) enable digital on PE1-0
  GPIO_PORTB_AMSEL_R &= ~0x3F; // 3) disable analog function on PB5-0
  GPIO_PORTB_PCTL_R &= ~0x00FFFFFF; // 4) enable regular GPIO
  GPIO_PORTB_DIR_R |= 0x3F;    // 5) outputs on PB5-0
  GPIO_PORTB_AFSEL_R &= ~0x3F; // 6) regular function on PB5-0
  GPIO_PORTB_DEN_R |= 0x0A;    // 7) enable digital on PB5-0
	GPIO_PORTF_AMSEL_R &= ~0x0A; // 3) disable analog function on PB5-0
  GPIO_PORTF_PCTL_R &= ~0x00FFFFFF; // 4) enable regular GPIO
  GPIO_PORTF_DIR_R |= 0x0A;    // 5) outputs on PB5-0
  GPIO_PORTF_AFSEL_R &= ~0x0A; // 6) regular function on PB5-0
  GPIO_PORTF_DEN_R |= 0x0A;    // 7) enable digital on PB5-0
  S = goN;  
 
  EnableInterrupts();
  while(1){
		LIGHT = FSM[S].Out;  // set lights
    SysTick_Wait10ms(FSM[S].Time);
    Input = SENSOR;     // read sensors
    S = FSM[S].Next[Input]; 
  }
}

